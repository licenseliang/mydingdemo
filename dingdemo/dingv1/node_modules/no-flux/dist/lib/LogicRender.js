'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _deepequal = require('deepequal');

var _deepequal2 = _interopRequireDefault(_deepequal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * LogicRender的功能：在render中根据渲染需要调用logic方法、处理通用UI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by ex90rts on 12/12/2016.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var LogicRender = function (_Component) {
  _inherits(LogicRender, _Component);

  function LogicRender() {
    _classCallCheck(this, LogicRender);

    return _possibleConstructorReturn(this, (LogicRender.__proto__ || Object.getPrototypeOf(LogicRender)).apply(this, arguments));
  }

  _createClass(LogicRender, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.executeAction();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _deepequal2.default)(nextProps.awareOf, this.props.awareOf)) {
        this.executeAction();
      }
    }
  }, {
    key: 'executeAction',
    value: function executeAction() {
      var host = this.context.host;
      var _props = this.props,
          action = _props.action,
          awareOf = _props.awareOf;

      if (action) {
        host.execute(action, awareOf);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var content = null;
      var _props2 = this.props,
          show = _props2.show,
          loading = _props2.loading,
          empty = _props2.empty,
          children = _props2.children,
          className = _props2.className,
          loadingProps = _props2.loadingProps,
          emptyProps = _props2.emptyProps,
          Loading = _props2.Loading,
          Empty = _props2.Empty;

      var cls = className || '';

      if (!show) {
        content = null;
      } else if (loading) {
        content = React.createElement(Loading, _extends({ className: cls + ' noflux-loading' }, loadingProps));
      } else if (empty) {
        content = React.createElement(Empty, _extends({ className: cls + ' noflux-empty' }, emptyProps));
      } else {
        content = React.createElement(
          'div',
          { className: cls },
          children
        );
      }

      return content;
    }
  }]);

  return LogicRender;
}(_react.Component);

LogicRender.propTypes = {
  action: _react.PropTypes.string,
  awareOf: _react.PropTypes.any,
  empty: _react.PropTypes.bool,
  loading: _react.PropTypes.bool,
  show: _react.PropTypes.bool,
  children: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.array])
};
LogicRender.defaultProps = {
  action: null,
  awareOf: '',
  empty: false,
  loading: false,
  show: true,
  children: [],
  Loading: 'div',
  Empty: 'div'
};
LogicRender.contextTypes = {
  host: _react.PropTypes.any
};
exports.default = LogicRender;
module.exports = exports['default'];