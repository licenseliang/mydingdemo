'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = callAPI;

require('isomorphic-fetch');

var _utils = require('./utils');

var _error = require('./error');

var _error2 = _interopRequireDefault(_error);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaults = {
    APINamespace: 'api',
    // https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch#Parameters
    fetchOptions: {
        method: 'GET',
        mode: 'cors',
        cache: 'default',
        credentials: 'include'
    }
};

function callAPI() {
    var APINamespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults.APINamespace;
    var fetchOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.fetchOptions;
    var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var methodOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var _methodOptions$path = methodOptions.path,
        path = _methodOptions$path === undefined ? [] : _methodOptions$path,
        _methodOptions$query = methodOptions.query,
        query = _methodOptions$query === undefined ? {} : _methodOptions$query,
        _methodOptions$option = methodOptions.options,
        options = _methodOptions$option === undefined ? {} : _methodOptions$option,
        _methodOptions$method = methodOptions.method,
        method = _methodOptions$method === undefined ? 'json' : _methodOptions$method;


    var url = (0, _utils.formatURL)(APINamespace, namespace, path, query);

    return fetch(url, _extends({}, defaults.fetchOptions, fetchOptions, options)).then(function (result) {

        if (!result.ok) {
            throw new _error2.default(result.status, result.statusText);
        }

        return result[method]();
    }).catch(function (error) {
        return error;
    });
}